<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Candy Sharing Game]]></title>
      <url>/2017/04/25/%E5%88%B7%E9%A2%98-Candy%20Sharing%20Game/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="https://www.nowcoder.com/practice/33adf53e095440b2823a39146a285b77" target="_blank" rel="external">牛客网-Candy Sharing Game</a>  </p>
<p><strong>题目描述：</strong><br>A number of students sit in a circle facing their teacher in the center. Each student initially has an number of pieces of candy. When the teacher blows a whistle, each student simultaneously gives half of his or her candy to the neighbor on the right. Any student, who ends up with an odd number of pieces of candy, is given another piece by the teacher. The game ends when all students have the same number of pieces of candy. Write a program which determines the number of times the teacher blows the whistle and the final number of pieces of candy for each student from the amount of candy each child starts with.<br><a id="more"></a><br><strong>输入描述：</strong><br>The input may describe more than one game. For each game, the input begins with the number N of students,followed by N candy counts for the children counter-clockwise around the circle. The input ends with a student count of 0. Each input number is on a line by itself.  </p>
<p><strong>输出描述：</strong><br>For each game, output the number of rounds of the game followed by the amount of candy each child ends up with,both on one line.<br>The game ends in a finite number of steps because:  </p>
<ol>
<li>The maximum candy count can never increase.  </li>
<li>The minimum candy count can never decrease.  </li>
<li>No one with more than the minimum amount will ever decrease to the minimum.  </li>
<li>If the maximum and minimum candy count are not the same, at least one student with the minimum amount must have their count increase       </li>
</ol>
<p><strong>输入例子：</strong><br>6<br>36<br>2<br>2<br>2<br>2<br>2<br>11<br>22<br>20<br>18<br>16<br>14<br>12<br>10<br>8<br>6<br>4<br>2<br>4<br>2<br>4<br>6<br>8<br>0       </p>
<p><strong>输出例子：</strong><br>15 14<br>17 22<br>4 8     </p>
<p><strong>解题思路：</strong><br>每个人将自己糖果的一般分给下一个人，再从上一个人处得到他糖果的一半，如果糖果数为奇数，就从老师那里得到一颗糖果。每个人的糖果数都相等则停止。   </p>
<p><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</div><div class="line">            <span class="keyword">int</span> n = in.nextInt();</div><div class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">                arr[i] = in.nextInt();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> temp1,temp2;</div><div class="line">            <span class="keyword">int</span> i;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">                    <span class="keyword">if</span>(arr[i] != arr[i-<span class="number">1</span>])</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">if</span>(i &gt;= n)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                count++;</div><div class="line">                temp2 = arr[<span class="number">0</span>];</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">                    temp1 = arr[i];</div><div class="line">                    arr[i] -= arr[i] / <span class="number">2</span>;</div><div class="line">                    arr[i] += temp2 / <span class="number">2</span>;</div><div class="line">                    temp2 = temp1;</div><div class="line">                &#125;</div><div class="line">                arr[<span class="number">0</span>] -= arr[<span class="number">0</span>] / <span class="number">2</span>;</div><div class="line">                arr[<span class="number">0</span>] += temp2 / <span class="number">2</span>;</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(arr[i]%<span class="number">2</span> == <span class="number">1</span>)</div><div class="line">                        arr[i]++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(count + <span class="string">" "</span> + arr[<span class="number">0</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 考研机试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Freckles]]></title>
      <url>/2017/04/25/%E5%88%B7%E9%A2%98-Freckles/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="https://www.nowcoder.com/practice/41b14b4cd0e5448fb071743e504063cf" target="_blank" rel="external">牛客网-Freckles</a>  </p>
<p><strong>题目描述：</strong><br>In an episode of the Dick Van Dyke show, little Richie connects the freckles on his Dad’s back to form a picture of the Liberty Bell. Alas, one of the freckles turns out to be a scar, so his Ripley’s engagement falls through.<br>Consider Dick’s back to be a plane with freckles at various (x,y) locations. Your job is to tell Richie how to connect the dots so as to minimize the amount of ink used. Richie connects the dots by drawing straight lines between pairs, possibly lifting the pen between lines. When Richie is done there must be a sequence of connected lines from any freckle to any other freckle.<br><a id="more"></a><br><strong>输入描述：</strong><br>The first line contains 0 &lt; n &lt;= 100, the number of freckles on Dick’s back. For each freckle, a line follows; each following line contains two real numbers indicating the (x,y) coordinates of the freckle.  </p>
<p><strong>输出描述：</strong><br>Your program prints a single real number to two decimal places: the minimum total length of ink lines that can connect all the freckles.     </p>
<p><strong>输入例子：</strong><br>3<br>1.0 1.0<br>2.0 2.0<br>2.0 4.0    </p>
<p><strong>输出例子：</strong><br>3.41    </p>
<p><strong>解题思路：</strong><br>最小生成树问题 </p>
<p><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</div><div class="line">            <span class="keyword">int</span> n = in.nextInt();</div><div class="line">            Point[] pArr = <span class="keyword">new</span> Point[n];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">                pArr[i] = <span class="keyword">new</span> Point(in.nextDouble(),in.nextDouble());</div><div class="line">            &#125;</div><div class="line">            System.out.printf(<span class="string">"%.2f"</span>,process(pArr,n));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">process</span><span class="params">(Point[] pArr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span>[][] cost = <span class="keyword">new</span> <span class="keyword">double</span>[len][len];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</div><div class="line">                <span class="keyword">double</span> q = Math.sqrt((pArr[i].x-pArr[j].x)*(pArr[i].x-pArr[j].x)+(pArr[i].y-pArr[j].y)*(pArr[i].y-pArr[j].y));</div><div class="line">                cost[i][j] = q;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> sum = createPrimeTree(cost,len);</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">createPrimeTree</span><span class="params">(<span class="keyword">double</span>[][] cost, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] used = <span class="keyword">new</span> <span class="keyword">int</span>[len];</div><div class="line">        <span class="keyword">double</span>[] minCost = <span class="keyword">new</span> <span class="keyword">double</span>[len];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">            used[i] = <span class="number">0</span>;</div><div class="line">            minCost[i] = Double.MAX_VALUE;</div><div class="line">        &#125;</div><div class="line">        minCost[<span class="number">0</span>] = <span class="number">0.0</span>;</div><div class="line">        <span class="keyword">double</span> sum = <span class="number">0.0</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">int</span> v = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">                <span class="keyword">if</span>(used[i] == <span class="number">0</span> &amp;&amp; (v == -<span class="number">1</span> || minCost[i] &lt; minCost[v]))</div><div class="line">                    v = i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(v == -<span class="number">1</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            used[v] = <span class="number">1</span>;</div><div class="line">            sum += minCost[v];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">                minCost[i] = Math.min(minCost[i],cost[v][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">double</span> y;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">        <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 考研机试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全排列]]></title>
      <url>/2017/04/25/%E5%88%B7%E9%A2%98-%E5%85%A8%E6%8E%92%E5%88%97/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="https://www.nowcoder.com/practice/5632c23d0d654aecbc9315d1720421c1" target="_blank" rel="external">牛客网-全排列</a>  </p>
<p><strong>题目描述：</strong><br>给定一个由不同的小写字母组成的字符串，输出这个字符串的所有全排列。 我们假设对于小写字母有’a’ &lt; ‘b’ &lt; … &lt; ‘y’ &lt; ‘z’，而且给定的字符串中的字母已经按照从小到大的顺序排列。<br><a id="more"></a><br><strong>输入描述：</strong><br>输入只有一行，是一个由不同的小写字母组成的字符串，已知字符串的长度在1到6之间。  </p>
<p><strong>输出描述：</strong><br>输出这个字符串的所有排列方式，每行一个排列。要求字母序比较小的排列在前面。字母序如下定义：<br>已知S = s1s2…sk , T = t1t2…tk，则S &lt; T 等价于，存在p (1 &lt;= p &lt;= k)，使得s1 = t1, s2 = t2, …, sp - 1 = tp - 1, sp &lt; tp成立。<br>每组样例输出结束后要再输出一个回车。  </p>
<p><strong>输入例子：</strong><br>abc  </p>
<p><strong>输出例子：</strong><br>abc<br>acb<br>bac<br>bca<br>cab<br>cba  </p>
<p><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</div><div class="line">            String str = in.next();</div><div class="line">            <span class="keyword">char</span>[] arr = str.toCharArray();</div><div class="line">            ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">            Permutation(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,list);</div><div class="line">            Collections.sort(list);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;list.size(); i++) &#123;</div><div class="line">                System.out.println(list.get(i));</div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Permutation</span><span class="params">(<span class="keyword">char</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end,ArrayList list)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(start == end)&#123;</div><div class="line">            list.add(String.valueOf(arr));</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;=end; i++)&#123;</div><div class="line">                <span class="keyword">char</span> temp = arr[start];</div><div class="line">                arr[start] = arr[i];</div><div class="line">                arr[i] = temp;</div><div class="line">                Permutation(arr,start+<span class="number">1</span>,end,list);</div><div class="line">                temp = arr[start];</div><div class="line">                arr[start] = arr[i];</div><div class="line">                arr[i] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 考研机试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[玛雅人的密码]]></title>
      <url>/2017/04/24/%E5%88%B7%E9%A2%98-%E7%8E%9B%E9%9B%85%E4%BA%BA%E7%9A%84%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="https://www.nowcoder.com/practice/761fc1e2f03742c2aa929c19ba96dbb0" target="_blank" rel="external">牛客网-玛雅人的密码</a>  </p>
<p><strong>题目描述：</strong><br>玛雅人有一种密码，如果字符串中出现连续的2012四个数字就能解开密码。给一个长度为N的字符串，该字符串中只含有0,1,2三种数字，问这个字符串要移位几次才能解开密码，每次只能移动相邻的两个数字。例如02120经过一次移位，可以得到20120,01220,02210,02102，其中20120符合要求，因此输出为1.如果无论移位多少次都解不开密码，输出-1。<br><a id="more"></a><br><strong>输入描述：</strong><br>输入包含多组测试数据，每组测试数据由两行组成。<br>第一行为一个整数N，代表字符串的长度（2&lt;=N&lt;=13）。<br>第二行为一个仅由0、1、2组成的，长度为N的字符串。  </p>
<p><strong>输出描述：</strong><br>对于每组测试数据，若可以解出密码，输出最少的移位次数；否则输出-1。  </p>
<p><strong>输入例子：</strong><br>5<br>02120  </p>
<p><strong>输出例子：</strong><br>1  </p>
<p><strong>解题思路：</strong><br>使用广度优先搜索，将最初的字符串放入队列中，每次从队头弹出字符串后，就将该字符串经过一次移位后得到的字符串放入队尾，用HashMap来存储新得到的字符串和该字符串相对于原始字符串的移位次数。  </p>
<p><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">str_step</span></span>&#123;</div><div class="line">        String str;</div><div class="line">        <span class="keyword">int</span> step;</div><div class="line">        str_step(String str, <span class="keyword">int</span> step)&#123;</div><div class="line">            <span class="keyword">this</span>.str = str;</div><div class="line">            <span class="keyword">this</span>.step = step;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BFS</span><span class="params">(String str, <span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(length &lt; <span class="number">4</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();  <span class="comment">//用来存储字符串和相对于原始字符串的移位次数</span></div><div class="line">        LinkedList&lt;str_step&gt; queue = <span class="keyword">new</span> LinkedList&lt;str_step&gt;();</div><div class="line">        map.put(str,size++);</div><div class="line">        queue.add(<span class="keyword">new</span> str_step(str,<span class="number">0</span>));</div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</div><div class="line">            str_step st = queue.getFirst();</div><div class="line">            queue.removeFirst();</div><div class="line">            <span class="keyword">if</span>(st.str.contains(<span class="string">"2012"</span>))&#123;</div><div class="line">                <span class="keyword">return</span> st.step;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; st.str.length()-<span class="number">1</span>; i++)&#123;</div><div class="line">                <span class="keyword">char</span>[] tempstr = st.str.toCharArray();</div><div class="line">                <span class="keyword">char</span> temp = tempstr[i];</div><div class="line">                tempstr[i] = tempstr[i+<span class="number">1</span>];</div><div class="line">                tempstr[i+<span class="number">1</span>] = temp;</div><div class="line">                String strtemp = String.valueOf(tempstr);</div><div class="line">                <span class="keyword">if</span>(!map.containsKey(strtemp))&#123;</div><div class="line">                    queue.add(<span class="keyword">new</span> str_step(strtemp,st.step+<span class="number">1</span>));</div><div class="line">                    map.put(strtemp,size++);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</div><div class="line">            <span class="keyword">int</span> n = in.nextInt();</div><div class="line">            String str = in.next();</div><div class="line">            size = <span class="number">0</span>;</div><div class="line">            System.out.println(BFS(str,n));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 考研机试 </tag>
            
            <tag> BFS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[I Wanna Go Home]]></title>
      <url>/2017/04/23/%E5%88%B7%E9%A2%98-I-Wanna-Go-Home/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="https://www.nowcoder.com/practice/0160bab3ce5d4ae0bb99dc605601e971?tpId=40&amp;tqId=21359&amp;tPage=2&amp;rp=2&amp;ru=%2Fta%2Fkaoyan&amp;qru=%2Fta%2Fkaoyan%2Fquestion-ranking" target="_blank" rel="external">牛客网-I Wanna Go Home</a>    </p>
<p><strong>题目描述：</strong><br>The country is facing a terrible civil war—-cities in the country are divided into two parts supporting different leaders. As a merchant, Mr. M does not pay attention to politics but he actually knows the severe situation, and your task is to help him reach home as soon as possible.<br>“For the sake of safety,”, said Mr.M, “your route should contain at most 1 road which connects two cities of different camp.”<br>Would you please tell Mr. M at least how long will it take to reach his sweet home?<br><a id="more"></a><br><strong>输入描述：</strong><br>The input contains multiple test cases.<br>The first line of each case is an integer N (2&lt;=N&lt;=600), representing the number of cities in the country.<br>The second line contains one integer M (0&lt;=M&lt;=10000), which is the number of roads.<br>The following M lines are the information of the roads. Each line contains three integers A, B and T, which means the road between city A and city B will cost time T. T is in the range of [1,500].<br>Next part contains N integers, which are either 1 or 2. The i-th integer shows the supporting leader of city i.<br>To simplify the problem, we assume that Mr. M starts from city 1 and his target is city 2. City 1 always supports leader 1 while city 2 is at the same side of leader 2.<br>Note that all roads are bidirectional and there is at most 1 road between two cities.<br>Input is ended with a case of N=0.   </p>
<p><strong>输出描述：</strong><br>For each test case, output one integer representing the minimum time to reach home.<br>If it is impossible to reach home according to Mr. M’s demands, output -1 instead.  </p>
<p><strong>输入例子：</strong><br>2<br>1<br>1 2 100<br>1 2<br>3<br>3<br>1 2 100<br>1 3 40<br>2 3 50<br>1 2 1<br>5<br>5<br>3 1 200<br>5 3 150<br>2 5 160<br>4 3 170<br>4 2 170<br>1 2 2 2 1<br>0  </p>
<p><strong>输出例子：</strong><br>100<br>90<br>540  </p>
<p><strong>解题思路：</strong><br>首先对输入数据构建邻接矩阵，注意可能会出现两点之间有多组数据，存储距离最小的一组。然后去除从country2到country1的值。最后用Dijkstra算法求最短路径。  </p>
<p><strong>代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">10000</span>;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</div><div class="line">            <span class="keyword">int</span> n = in.nextInt();</div><div class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">int</span> m = in.nextInt();</div><div class="line">            <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>][n+<span class="number">1</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n; j ++)&#123;</div><div class="line">                    arr[i][j] = max;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">                <span class="keyword">int</span> a = in.nextInt();</div><div class="line">                <span class="keyword">int</span> b = in.nextInt();</div><div class="line">                <span class="keyword">int</span> c = in.nextInt();</div><div class="line">                <span class="keyword">if</span>(c &lt; arr[a][b])&#123;</div><div class="line">                    arr[a][b] = c;</div><div class="line">                    arr[b][a] = c;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span>[] cls = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">                cls[i] = in.nextInt();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n; j ++)&#123;</div><div class="line">                    <span class="keyword">if</span>(cls[i] == <span class="number">2</span> &amp;&amp; cls[j] == <span class="number">1</span>)&#123;</div><div class="line">                        arr[i][j] = max;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[n+<span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span>[] dis = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</div><div class="line">            dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">            flag[<span class="number">1</span>] = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">int</span> start = <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> end = <span class="number">2</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">                <span class="keyword">int</span> k = -<span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> min = <span class="number">10000</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n; j++)&#123;</div><div class="line">                    <span class="keyword">if</span>(flag[j] == <span class="keyword">false</span> &amp;&amp; arr[start][j] &lt; min)&#123;</div><div class="line">                        min = arr[start][j];</div><div class="line">                        k = j;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(k != -<span class="number">1</span>)&#123;</div><div class="line">                    dis[k] = min;</div><div class="line">                    flag[k] = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">                        <span class="keyword">if</span>(flag[j] == <span class="keyword">false</span> &amp;&amp; arr[start][k] + arr[k][j] &lt; arr[start][j])&#123;</div><div class="line">                            arr[start][j] = arr[start][k] + arr[k][j];</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(dis[end] != <span class="number">0</span>)&#123;</div><div class="line">                System.out.println(dis[end]);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(-<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 考研机试 </tag>
            
            <tag> 贪心算法 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[代理服务器]]></title>
      <url>/2017/04/23/%E5%88%B7%E9%A2%98-%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>题目地址：<a href="https://www.nowcoder.com/practice/1284469ee94a4762848816a42281a9e0" target="_blank" rel="external">牛客网-代理服务器</a></p>
<p><strong>题目描述：</strong><br>使用代理服务器能够在一定程度上隐藏客户端信息，从而保护用户在互联网上的隐私。我们知道n个代理服务器的IP地址，现在要用它们去访问m个服务器。这 m 个服务器的 IP 地址和访问顺序也已经给出。系统在同一时刻只能使用一个代理服务器，并要求不能用代理服务器去访问和它 IP地址相同的服务器（不然客户端信息很有可能就会被泄露）。在这样的条件下，找到一种使用代理服务器的方案，使得代理服务器切换的次数尽可能得少。<br><a id="more"></a><br><strong>输入描述：</strong><br>每个测试数据包括 n + m + 2 行。<br>第 1 行只包含一个整数 n，表示代理服务器的个数。<br>第 2行至第n + 1行每行是一个字符串，表示代理服务器的 IP地址。这n个 IP地址两两不相同。<br>第 n + 2 行只包含一个整数 m，表示要访问的服务器的个数。<br>第 n + 3 行至第 n + m + 2 行每行是一个字符串，表示要访问的服务器的 IP 地址，按照访问的顺序给出。<br>每个字符串都是合法的IP地址，形式为“xxx.yyy.zzz.www”，其中任何一部分均是0–255之间的整数。输入数据的任何一行都不包含空格字符。<br>其中，1&lt;=n&lt;=1000，1&lt;=m&lt;=5000。   </p>
<p><strong>输出描述：</strong><br>可能有多组测试数据，对于每组输入数据， 输出数据只有一行，包含一个整数s，表示按照要求访问服务器的过程中切换代理服务器的最少次数。第一次使用的代理服务器不计入切换次数中。若没有符合要求的安排方式，则输出-1。  </p>
<p><strong>输入例子：</strong><br>3<br>166.111.4.100<br>162.105.131.113<br>202.112.128.69<br>6<br>72.14.235.104<br>166.111.4.100<br>207.46.19.190<br>202.112.128.69<br>162.105.131.113<br>118.214.226.52   </p>
<p><strong>输出例子：</strong><br>1  </p>
<p><strong>解题思路：</strong><br>利用贪心算法。代理服务器可以多次使用，每次选择能够访问最多服务器的代理服务器，从需要转换代理服务器的位置开始，再次使用贪心算法，直到将服务器遍历完毕。  </p>
<p><strong>代码如下：</strong></p>
<pre><code class="java"><span class="keyword">import</span> java.util.*;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{
        Scanner in = <span class="keyword">new</span> Scanner(System.in);
        <span class="keyword">while</span> (in.hasNext()){
            <span class="keyword">int</span> n = in.nextInt();
            String[] arr1 = <span class="keyword">new</span> String[n];
            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++){
                arr1[i] = in.next();
            }
            <span class="keyword">int</span> m = in.nextInt();
            String[] arr2 = <span class="keyword">new</span> String[m];
            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++){
                arr2[i] = in.next();
            }
            <span class="keyword">int</span> cur = <span class="number">0</span>;
            <span class="keyword">int</span> result = <span class="number">0</span>;
            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;
            <span class="keyword">while</span> (cur &lt; m){
                <span class="keyword">int</span> maxstep = cur;
                <span class="keyword">int</span> j;
                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++){
                    <span class="keyword">for</span>(j = cur; j &lt; m; j++){
                        <span class="keyword">if</span>(arr1[i].equals(arr2[j])){
                            <span class="keyword">if</span>(j &gt; maxstep){
                                maxstep = j;
                            }
                            <span class="keyword">break</span>;
                        }
                    }
                    <span class="keyword">if</span>(j == m){
                        flag = <span class="keyword">true</span>;
                        <span class="keyword">break</span>;
                    }
                }
                <span class="keyword">if</span>(flag) <span class="keyword">break</span>;
                <span class="keyword">if</span>(cur == maxstep) <span class="keyword">break</span>;
                cur = maxstep;
                result++;
            }
            <span class="keyword">if</span>(flag){
                System.out.println(result);
            }<span class="keyword">else</span> {
                System.out.println(-<span class="number">1</span>);
            }
        }
    }
}
</code></pre>
]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 考研机试 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 16.04+opencv-2.4.13+cuda-8.0环境配置]]></title>
      <url>/2017/03/30/Ubuntu%2016.04+opencv-2.4.13+cuda-8.0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>首先安装Ubuntu16.04，参考<a href="http://www.jianshu.com/p/2eebd6ad284d" target="_blank" rel="external">Windows10+Ubuntu双系统安装</a>。安装完成后，修改/etc/default/grub文件里的分辨率，并且把“quiet splash” 改成 “nomodeset quiet splash”, 然后 update-grub。<br>插上Nvidia显卡，在<strong>附加驱动</strong>中安装合适的显卡驱动。<br><a id="more"></a></p>
<h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><p>下载CUDA Toolkit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://10.3.200.202/cache/4/01/nvidia.com/ff57ff0ed5693ec89f12a86f1a0987b4/cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb?autho=1490850739_f7a9f92a3edf953e01afae65e14a56d5&amp;file=cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb</div></pre></td></tr></table></figure></p>
<p>下载完成之后使用如下命令进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i cuda-repo-ubuntu1604-8-0-local-ga2_8.0.61-1_amd64.deb</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install cuda</div></pre></td></tr></table></figure></p>
<p>安装完成之后设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=/usr/local/cuda-8.0/bin:$PATH  </div><div class="line">export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH</div></pre></td></tr></table></figure></p>
<p>查看显卡的驱动版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/driver/nvidia/version</div></pre></td></tr></table></figure></p>
<p>查看nvcc编译器的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvcc -V</div></pre></td></tr></table></figure></p>
<h2 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h2><p>首先下载<a href="https://codeload.github.com/opencv/opencv/zip/2.4.13" target="_blank" rel="external">opencv2.4.13</a></p>
<h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update  </div><div class="line">sudo apt-get install libopencv-dev build-essential checkinstall cmake pkg-config yasm libtiff5-dev libjpeg-dev libjasper-dev libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev libxine2-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev libv4l-dev python-dev python-numpy libtbb-dev libqt4-dev libgtk2.0-dev libfaac-dev libmp3lame-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev x264 v4l-utils</div></pre></td></tr></table></figure>
<h3 id="BUILD"><a href="#BUILD" class="headerlink" title="BUILD"></a>BUILD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">unzip 2.4.13</div><div class="line">cd opencv-2.4.13</div><div class="line">mkdir release</div><div class="line">cd release</div><div class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D BUILD_TIFF=ON -D WITH_CUDA=ON ..</div></pre></td></tr></table></figure>
<p>检查cmake打印的信息中CUDA和CUDALS的状态是否是YES：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--     Use Cuda:                    YES (ver 8.0)  </div><div class="line">--     Use OpenCL:                  YES  </div><div class="line">--   </div><div class="line">--   NVIDIA CUDA  </div><div class="line">--     Use CUFFT:                   YES  </div><div class="line">--     Use CUBLAS:                  YES  </div><div class="line">--     USE NVCUVID:                 NO  </div><div class="line">--     NVIDIA GPU arch:             11 12 13 20 21 30 35  </div><div class="line">--     NVIDIA PTX archs:            30  </div><div class="line">--     Use fast math:               YES</div></pre></td></tr></table></figure></p>
<h3 id="确认无误后，开始安装"><a href="#确认无误后，开始安装" class="headerlink" title="确认无误后，开始安装"></a>确认无误后，开始安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make -j4  //多线程编译</div><div class="line">sudo make install</div></pre></td></tr></table></figure>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">echo &apos;/usr/local/lib&apos; | sudo tee -a /etc/ld.so.conf.d/opencv.conf    </div><div class="line">sudo ldconfig    </div><div class="line">printf &apos;# OpenCV\nPKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig\nexport PKG_CONFIG_PATH\n&apos; &gt;&gt; ~/.bashrc    </div><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure>
<p>查看opencv版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkg-config --modversion opencv</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://blog.aicry.com/ubuntu-14-04-install-opencv-with-cuda/" target="_blank" rel="external">UBUNTU 14.04: INSTALL OPENCV WITH CUDA</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> CUDA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SIFT视频特征分析]]></title>
      <url>/2017/03/14/SIFT%E8%A7%86%E9%A2%91%E7%89%B9%E5%BE%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="SIFT算法"><a href="#SIFT算法" class="headerlink" title="SIFT算法"></a>SIFT算法</h2><p>SIFT（尺度不变特征变换， Scale‐Invariant Feature Transform）是在计算机视觉领域中检测和描述图像中局部特征的算法。SIFT特征具备旋转、缩放、平移等几何形变不变性，并且对噪声、光照等图像变化有很好的稳定性。SIFT算法分为以下几个阶段：</p>
<h3 id="建立尺度空间"><a href="#建立尺度空间" class="headerlink" title="建立尺度空间"></a>建立尺度空间</h3><p>应用高斯卷积核构造图像尺度空间（高斯卷积核是唯一可能的尺度空间核）：<br><a id="more"></a><br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170314_210222.png" alt="尺度空间"><br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170314_210833.png" alt="高斯函数"><br>其中G(x, y, σ)是尺度可变高斯函数。σ是尺度空间因子，它决定着图像模糊平滑处理的程度。大尺度（σ值大）对应图像的概貌信息，小尺度（σ值小）对应图像的细节信息。大尺度对应着低分辨率，小尺度对应着高分辨率。<br>利用不同尺度的高斯差分核与图像卷积构造高斯差分尺度空间（DoG scale-space）：<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170314_231008.png" alt="高斯差分尺度空间"><br>图像金字塔的建立：将输入图像通过不同尺度（σ）的高斯核函数连续滤波和降采样，形成高斯金字塔图像，在此基础上建立DoG金字塔。如下图所示，左侧为高斯金字塔，右侧为DoG金字塔。<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170314_231422.png" alt="高斯金字塔与DOG金字塔"><br>高斯金字塔共分 O 组（ Octave），每组又分 S 层（ Layer）。金字塔的层数 S 为：<code>S = s + 3</code>。Lowe 建议 s 为 3。<br>组内各层图像的分辨率是相同的，即长和宽相同，但尺度逐渐增加，即越往塔顶图像越模糊。而下一组的第0层图像是由上一组倒数第三层图像按照隔点降采样得到的，即图像的长和宽分别减半。<br>DoG 金字塔是由高斯金字塔得到的，即高斯金字塔组内相邻两层图像相减得到 DoG 金字塔。因此高斯金字塔每组有 s+3 层图像，而 DoG 金字塔每组则有 s+2 层图像。</p>
<h3 id="检测DOG尺度空间极值点"><a href="#检测DOG尺度空间极值点" class="headerlink" title="检测DOG尺度空间极值点"></a>检测DOG尺度空间极值点</h3><p>为了寻找尺度空间的极值点，每个检测点不仅需要和它所在尺度空间图像的相邻点进行比较，还需要和它的相邻尺度空间图像的点进行比较。如下图所示。<br>每个采样点和它同尺度的8个相邻点以及上下相邻尺度对应的9*2个点，共26个相邻点比较，以判断其是否为极值点。<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170314_233856.png" alt="DoG极值点检测"><br>通过拟合三维二次函数以精确确定关键点的位置和尺度（达到亚像素精度），同时根据曲面拟合的方法对关键点进行进一步的精确定位，同时剔除对比度低的关键点和不稳定的边缘响应点（因为DoG算子会产生较强的边缘响应）。<br>1.去除对比度低的点<br>泰勒级数展开式为：<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_094149.png" alt="泰勒级数展开式"><br>对上式求导，并令其为0，得到精确的位置：<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_094202.png" alt=""><br>将公式（2）代入公式（1），就得到了该极值点下的极值：<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_094219.png" alt=""><br>若<img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_095355.png" alt="">,该特征点就保留下来，否则就丢弃。</p>
<p>2.去除边缘响应<br>一个平坦的DoG响应峰值往往在横跨边缘的地方有较大的主曲率，而在垂直边缘的方向上有较小的主曲率，主曲率可以通过2 × 2的Hessian矩阵H求出：<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_145855.png" alt=""><br>矩阵 H 的直迹和行列式分别为：<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_150021.png" alt=""><br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_150034.png" alt=""><br>首先剔除掉那些行列式为负数的点，即Det(H) &lt; 0，因为如果像素的曲率有不同的符号，则该点肯定不是特征点。设α &gt; β，并且α = γ β，其中γ &gt; 1，则<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_150120.png" alt=""><br> (γ + 1)2 / γ的值在两个特征值相等的时候最小，随着γ的增大而增大。因此，为了检测主曲率是否在某域值γ下，只要检查下式是否成立即可：<br> <img src="http://ojampi25q.bkt.clouddn.com/snipaste20170315_150835.png" alt=""><br> 对于不满足上式的极值点就不是特征点，因此应该把它们剔除掉。在Lowe的文章中取γ = 10。  </p>
<h3 id="为特征点分配方向"><a href="#为特征点分配方向" class="headerlink" title="为特征点分配方向"></a>为特征点分配方向</h3><p>经上面两个步骤，就可以找到图像中的所有特征点，这些特征点具有尺度不变性。为了实现旋转不变性，还需要为特征点分配一个方向角度。<br>像素梯度的幅值和幅角的计算公式为：<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170316_091355.png" alt=""><br>在完成特征点邻域范围内的梯度计算后，还要应用梯度方向直方图来统计邻域内像素的梯度方向所对应的幅值大小。在实际计算中，梯度直方图的范围是0~360度，其中每45度一个柱，总共8个柱。在以r为半径的区域内，把那些梯度方向在0~44度范围内的像素找出来，把它们的加权后的梯度幅值相加在一起，作为第一柱的柱高；求其它柱高度的方法相同。<br>直方图的主峰值所代表的方向就是该特征点处邻域范围内图像梯度的主方向，也就是该特征点的主方向。每个特征点除了必须分配一个主方向外，还可能有一个或更多个辅方向，增加辅方向的目的是为了增强图像匹配的鲁棒性。辅方向的定义是，当存在另一个柱体高度大于主方向柱体高度的80%时，则该柱体所代表的方向角度就是该特征点的辅方向。<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170317_162613.png" alt="">  </p>
<h3 id="生成特征点描述符"><a href="#生成特征点描述符" class="headerlink" title="生成特征点描述符"></a>生成特征点描述符</h3><p>首先将坐标轴旋转为特征点的方向，以确保旋转不变性。<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170317_162646.png" alt=""><br>图左部分的中央为当前特征点的位置，每个小格代表特征点邻域所在尺度空间的一个像素，利用公式求得每个像素的梯度幅值与梯度方向，箭头方向代表该像素的梯度方向，箭头长度代表梯度模值，然后用高斯窗口对其进行加权运算。<br>图中蓝色的圈代表高斯加权的范围（越靠近特征点的像素梯度方向信息贡献越大）。然后在每4 × 4的小块上计算8个方向的梯度方向直方图，绘制每个梯度方向的累加值，就得到了一个子区域。<br><img src="http://ojampi25q.bkt.clouddn.com/snipaste20170317_162745.png" alt=""><br>Lowe建议对每个特征点使用4 × 4共16个子区域来描述，这样对于一个特征点就可以产生4 × 4 × 8 = 128个数据，即最终产生128维的SIFT特征向量。<br>当两幅图像的SIFT特征向量生成后，下一步我们采用关键点特征向量的<strong>欧式距离</strong>来作为两幅图像中关键点的相似性判定度量。取图像1中的某个关键点，并找出其与图像2中欧式距离最近的前两个关键点，在这两个关键点中，如果最近的距离除以次近的距离少于某个比例阈值，则接受这一对匹配点。降低这个比例阈值，SIFT匹配点数目会减少，但更加稳定。  </p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>视频特征分析<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include "opencv2/core/core.hpp"</span></div><div class="line"><span class="comment">#include "opencv/highgui.h"</span></div><div class="line"><span class="comment">#include "opencv2/imgproc/imgproc.hpp"</span></div><div class="line"><span class="comment">#include "opencv2/features2d/features2d.hpp"</span></div><div class="line"><span class="comment">#include "opencv2/nonfree/nonfree.hpp"</span></div><div class="line"><span class="comment">#include "opencv2/legacy/legacy.hpp"</span></div><div class="line"></div><div class="line">using namespace cv;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main(int argc, char** argv)</div><div class="line">&#123;</div><div class="line">    VideoCapture vc;</div><div class="line">    vc.open(0);</div><div class="line">    Mat img = imread(<span class="string">"test.png"</span>, CV_LOAD_IMAGE_COLOR);//模版图像</div><div class="line">    namedWindow(<span class="string">"SIFT"</span>);</div><div class="line">    <span class="keyword">if</span> (vc.isOpened())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span> (1)</div><div class="line">        &#123;</div><div class="line">            Mat frame;</div><div class="line">            //原始图像每5帧图像取1帧进行处理</div><div class="line">            <span class="keyword">for</span> (int i = 0; i &lt; 5; i++)</div><div class="line">            &#123;</div><div class="line">                vc.read(frame);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (frame.empty())</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">            SIFT sift1, sift2;</div><div class="line">            vector&lt;KeyPoint&gt; key_points1, key_points2;</div><div class="line">            Mat descriptors1, descriptors2, mascara;</div><div class="line">            sift1(frame,mascara,key_points1,descriptors1);</div><div class="line">            sift2(img,mascara,key_points2,descriptors2);</div><div class="line">            //实例化暴力匹配器——BruteForceMatcher</div><div class="line">            BruteForceMatcher&lt;L2&lt;<span class="built_in">float</span>&gt; &gt; matcher;</div><div class="line">            //定义匹配器算子</div><div class="line">            vector&lt;DMatch&gt;matches;</div><div class="line">            //实现描述符之间的匹配，得到算子matches</div><div class="line">            matcher.match(descriptors1,descriptors2,matches);</div><div class="line">            //提取出前30个最佳匹配结果</div><div class="line">            nth_element(matches.begin(),     //匹配器算子的初始位置</div><div class="line">                    matches.begin()+29,     // 排序的数量</div><div class="line">                    matches.end());       // 结束位置</div><div class="line">            //剔除掉其余的匹配结果</div><div class="line">            matches.erase(matches.begin()+30, matches.end());</div><div class="line">            Mat img_matches;</div><div class="line">            //在输出图像中绘制匹配结果</div><div class="line">            drawMatches(frame,key_points1, img, key_points2, matches, img_matches, Scalar(255,255,255));    </div><div class="line">            imshow(<span class="string">"SIFT"</span>, img_matches);</div><div class="line">            <span class="built_in">wait</span>Key(1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    vc.release();</div><div class="line">    <span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://blog.csdn.net/abcjennifer/article/details/7639681" target="_blank" rel="external">SIFT特征提取分析</a></li>
<li><a href="http://blog.csdn.net/zhaocj/article/details/42124473" target="_blank" rel="external">Opencv2.4.9源码分析——SIFT</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> SIFT </tag>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[为博客添加多说评论框]]></title>
      <url>/2017/03/14/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E6%A1%86/</url>
      <content type="html"><![CDATA[<h3 id="注册多说"><a href="#注册多说" class="headerlink" title="注册多说"></a>注册多说</h3><p>访问<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>网站，选用自己习惯的社交工具帐号登录，登录后根据提示填写一些基本信息。完成所有步骤后，会生成一个<strong>通用代码</strong>，复制下来。</p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在<code>_config.yml</code>中增加<code>duoshuo_shortname:站点的shortname</code>，这里的shortname也就是你的二级域名。<br><a id="more"></a></p>
<h3 id="粘贴通用代码"><a href="#粘贴通用代码" class="headerlink" title="粘贴通用代码"></a>粘贴通用代码</h3><p>打开themes/主题名/layout/_partial/comment.ejs这个文件 ，在下面位置粘贴刚才复制的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> ( page.comments)&#123; %&gt;</div><div class="line">&lt;section id="comment"&gt;</div><div class="line">此处粘贴通用代码</div><div class="line">&lt;/section&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>
<p>粘贴完后，替换代码里的标题、网址、ID三项信息。<br>标题可以用&lt;%= item.title %&gt;来替换，<br>网址可以用&lt;%- config.url %&gt;&lt;%- config.root%&gt;&lt;%- item.path %&gt;来替换,<br>ID可以用&lt;%- item.path %&gt;来替换。  </p>
<h3 id="重新生成部署"><a href="#重新生成部署" class="headerlink" title="重新生成部署"></a>重新生成部署</h3><p>在hexo文件下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 多说 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github Pages搭建个人博客]]></title>
      <url>/2017/01/04/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>下载<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>，一路安装即可</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载<a href="https://git-scm.com/download/" target="_blank" rel="external">Git</a><br><a id="more"></a></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>创建Hexo文件夹，进入文件夹，右键鼠标，点击Git Bash Here，执行以下操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install  hexo-cli -g</div><div class="line">$ hexo init</div><div class="line">$ npm install</div><div class="line">$ hexo g <span class="comment"># hexo generate</span></div><div class="line">$ hexo s <span class="comment"># hexo server</span></div></pre></td></tr></table></figure></p>
<p>现在打开<a href="http://localhost:4000/，可以看到默认的效果了。" target="_blank" rel="external">http://localhost:4000/，可以看到默认的效果了。</a></p>
<p>Hexo常用命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ hexo generate <span class="comment"># 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span></div><div class="line">$ hexo server <span class="comment"># 启动本地web服务，用于博客的预览</span></div><div class="line">$ hexo deploy <span class="comment"># 部署博客到远端</span></div><div class="line">$ hexo new <span class="string">"postName"</span> <span class="comment"># 新建文章</span></div><div class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></div><div class="line">$ hexo d -g <span class="comment"># 生成部署</span></div><div class="line">$ hexo s -g <span class="comment"># 生成预览</span></div></pre></td></tr></table></figure></p>
<h2 id="将博客部署到Github-Pages上"><a href="#将博客部署到Github-Pages上" class="headerlink" title="将博客部署到Github Pages上"></a>将博客部署到Github Pages上</h2><p>本地的博客已经搭建起来了，我们现在需要将本地的博客部署到Github上，就可以直接通过<a href="http://gengxin1995.github.io" target="_blank" rel="external">http://gengxin1995.github.io</a>来访问了。</p>
<p>1.创建项目代码库<br>点击<a href="https://github.com/new" target="_blank" rel="external">New repository</a></p>
<p><img src="http://ojampi25q.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170105111915.png" alt="新建仓库"></p>
<p>2.安装插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>3.将本地Hexo文件更新到Github库中<br>在配置文件_config.xml中作如下修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/gengxin1995/gengxin1995.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>然后在hexo文件下执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
<p>即可完成部署</p>
<h2 id="绑定独立域名"><a href="#绑定独立域名" class="headerlink" title="绑定独立域名"></a>绑定独立域名</h2><p>首先，你需要有个域名，学生可以参与<a href="https://www.qcloud.com/act/campus" target="_blank" rel="external">腾讯云校园计划</a><br>进入source目录，添加CNAME文件，内容为你的域名：<br><img src="http://ojampi25q.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170105113903.png" alt=""><br>在hexo文件夹中提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
<p>然后如下图所示解析域名<br><img src="http://ojampi25q.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170105113621.png" alt=""><br>等待生效，然后你就可以通过域名访问你的博客主页了。</p>
<h2 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a>Hexo主题设置</h2><p>以主题yilia为例进行说明<br>在hexo文件夹下的themes目录下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git</div></pre></td></tr></table></figure></p>
<p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</p>
<p>返回hexo目录，在Git Bash中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.jianshu.com/p/834d7cc0668d" target="_blank" rel="external">我的博客是如何搭建的（github pages + HEXO + 域名绑定）</a></li>
<li><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a></li>
<li><a href="http://litten.me/2014/08/31/hexo-theme-yilia/" target="_blank" rel="external">Hexo主题Yilia</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
