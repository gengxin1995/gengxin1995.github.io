[{"title":"SIFT视频特征分析","date":"2017-03-14T11:00:03.000Z","path":"2017/03/14/SIFT视频特征分析/","text":"SIFT算法SIFT（尺度不变特征变换， Scale‐Invariant Feature Transform）是在计算机视觉领域中检测和描述图像中局部特征的算法。SIFT特征具备旋转、缩放、平移等几何形变不变性，并且对噪声、光照等图像变化有很好的稳定性。SIFT算法分为以下几个阶段： 建立尺度空间应用高斯卷积核构造图像尺度空间（高斯卷积核是唯一可能的尺度空间核）：其中G(x, y, σ)是尺度可变高斯函数。σ是尺度空间因子，它决定着图像模糊平滑处理的程度。大尺度（σ值大）对应图像的概貌信息，小尺度（σ值小）对应图像的细节信息。大尺度对应着低分辨率，小尺度对应着高分辨率。利用不同尺度的高斯差分核与图像卷积构造高斯差分尺度空间（DoG scale-space）：图像金字塔的建立：将输入图像通过不同尺度（σ）的高斯核函数连续滤波和降采样，形成高斯金字塔图像，在此基础上建立DoG金字塔。如下图所示，左侧为高斯金字塔，右侧为DoG金字塔。高斯金字塔共分 O 组（ Octave），每组又分 S 层（ Layer）。金字塔的层数 S 为：S = s + 3。Lowe 建议 s 为 3。组内各层图像的分辨率是相同的，即长和宽相同，但尺度逐渐增加，即越往塔顶图像越模糊。而下一组的第0层图像是由上一组倒数第三层图像按照隔点降采样得到的，即图像的长和宽分别减半。DoG 金字塔是由高斯金字塔得到的，即高斯金字塔组内相邻两层图像相减得到 DoG 金字塔。因此高斯金字塔每组有 s+3 层图像，而 DoG 金字塔每组则有 s+2 层图像。 检测DOG尺度空间极值点为了寻找尺度空间的极值点，每个检测点不仅需要和它所在尺度空间图像的相邻点进行比较，还需要和它的相邻尺度空间图像的点进行比较。如下图所示。每个采样点和它同尺度的8个相邻点以及上下相邻尺度对应的9*2个点，共26个相邻点比较，以判断其是否为极值点。通过拟合三维二次函数以精确确定关键点的位置和尺度（达到亚像素精度），同时根据曲面拟合的方法对关键点进行进一步的精确定位，同时剔除对比度低的关键点和不稳定的边缘响应点（因为DoG算子会产生较强的边缘响应）。1.去除对比度低的点泰勒级数展开式为：对上式求导，并令其为0，得到精确的位置：将公式（2）代入公式（1），就得到了该极值点下的极值：若,该特征点就保留下来，否则就丢弃。 2.去除边缘响应一个平坦的DoG响应峰值往往在横跨边缘的地方有较大的主曲率，而在垂直边缘的方向上有较小的主曲率，主曲率可以通过2 × 2的Hessian矩阵H求出：矩阵 H 的直迹和行列式分别为：首先剔除掉那些行列式为负数的点，即Det(H) &lt; 0，因为如果像素的曲率有不同的符号，则该点肯定不是特征点。设α &gt; β，并且α = γ β，其中γ &gt; 1，则 (γ + 1)2 / γ的值在两个特征值相等的时候最小，随着γ的增大而增大。因此，为了检测主曲率是否在某域值γ下，只要检查下式是否成立即可： 对于不满足上式的极值点就不是特征点，因此应该把它们剔除掉。在Lowe的文章中取γ = 10。 为特征点分配方向经上面两个步骤，就可以找到图像中的所有特征点，这些特征点具有尺度不变性。为了实现旋转不变性，还需要为特征点分配一个方向角度。像素梯度的幅值和幅角的计算公式为：在完成特征点邻域范围内的梯度计算后，还要应用梯度方向直方图来统计邻域内像素的梯度方向所对应的幅值大小。在实际计算中，梯度直方图的范围是0~360度，其中每45度一个柱，总共8个柱。在以r为半径的区域内，把那些梯度方向在0~44度范围内的像素找出来，把它们的加权后的梯度幅值相加在一起，作为第一柱的柱高；求其它柱高度的方法相同。直方图的主峰值所代表的方向就是该特征点处邻域范围内图像梯度的主方向，也就是该特征点的主方向。每个特征点除了必须分配一个主方向外，还可能有一个或更多个辅方向，增加辅方向的目的是为了增强图像匹配的鲁棒性。辅方向的定义是，当存在另一个柱体高度大于主方向柱体高度的80%时，则该柱体所代表的方向角度就是该特征点的辅方向。 生成特征点描述符首先将坐标轴旋转为特征点的方向，以确保旋转不变性。图左部分的中央为当前特征点的位置，每个小格代表特征点邻域所在尺度空间的一个像素，利用公式求得每个像素的梯度幅值与梯度方向，箭头方向代表该像素的梯度方向，箭头长度代表梯度模值，然后用高斯窗口对其进行加权运算。图中蓝色的圈代表高斯加权的范围（越靠近特征点的像素梯度方向信息贡献越大）。然后在每4 × 4的小块上计算8个方向的梯度方向直方图，绘制每个梯度方向的累加值，就得到了一个子区域。Lowe建议对每个特征点使用4 × 4共16个子区域来描述，这样对于一个特征点就可以产生4 × 4 × 8 = 128个数据，即最终产生128维的SIFT特征向量。当两幅图像的SIFT特征向量生成后，下一步我们采用关键点特征向量的欧式距离来作为两幅图像中关键点的相似性判定度量。取图像1中的某个关键点，并找出其与图像2中欧式距离最近的前两个关键点，在这两个关键点中，如果最近的距离除以次近的距离少于某个比例阈值，则接受这一对匹配点。降低这个比例阈值，SIFT匹配点数目会减少，但更加稳定。 算法实现视频特征分析1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include \"opencv2/core/core.hpp\"#include \"opencv/highgui.h\"#include \"opencv2/imgproc/imgproc.hpp\"#include \"opencv2/features2d/features2d.hpp\"#include \"opencv2/nonfree/nonfree.hpp\"#include \"opencv2/legacy/legacy.hpp\"using namespace cv;using namespace std;int main(int argc, char** argv)&#123; VideoCapture vc; vc.open(0); Mat img = imread(\"test.png\", CV_LOAD_IMAGE_COLOR);//模版图像 namedWindow(\"SIFT\"); if (vc.isOpened()) &#123; while (1) &#123; Mat frame; //原始图像每5帧图像取1帧进行处理 for (int i = 0; i &lt; 5; i++) &#123; vc.read(frame); &#125; if (frame.empty()) &#123; break; &#125; SIFT sift1, sift2; vector&lt;KeyPoint&gt; key_points1, key_points2; Mat descriptors1, descriptors2, mascara; sift1(frame,mascara,key_points1,descriptors1); sift2(img,mascara,key_points2,descriptors2); //实例化暴力匹配器——BruteForceMatcher BruteForceMatcher&lt;L2&lt;float&gt; &gt; matcher; //定义匹配器算子 vector&lt;DMatch&gt;matches; //实现描述符之间的匹配，得到算子matches matcher.match(descriptors1,descriptors2,matches); //提取出前30个最佳匹配结果 nth_element(matches.begin(), //匹配器算子的初始位置 matches.begin()+29, // 排序的数量 matches.end()); // 结束位置 //剔除掉其余的匹配结果 matches.erase(matches.begin()+30, matches.end()); Mat img_matches; //在输出图像中绘制匹配结果 drawMatches(frame,key_points1, img, key_points2, matches, img_matches, Scalar(255,255,255)); imshow(\"SIFT\", img_matches); waitKey(1); &#125; &#125; vc.release(); return 0;&#125; 参考资料 SIFT特征提取分析 Opencv2.4.9源码分析——SIFT","tags":[{"name":"SIFT","slug":"SIFT","permalink":"http://yoursite.com/tags/SIFT/"},{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"OpneCV","slug":"OpneCV","permalink":"http://yoursite.com/tags/OpneCV/"}]},{"title":"为博客添加多说评论框","date":"2017-03-14T10:33:50.000Z","path":"2017/03/14/为博客添加多说评论框/","text":"注册多说访问多说网站，选用自己习惯的社交工具帐号登录，登录后根据提示填写一些基本信息。完成所有步骤后，会生成一个通用代码，复制下来。 修改配置文件在_config.yml中增加duoshuo_shortname:站点的shortname，这里的shortname也就是你的二级域名。 粘贴通用代码打开themes/主题名/layout/_partial/comment.ejs这个文件 ，在下面位置粘贴刚才复制的代码：12345&lt;% if ( page.comments)&#123; %&gt;&lt;section id=\"comment\"&gt;此处粘贴通用代码&lt;/section&gt;&lt;% &#125; %&gt; 粘贴完后，替换代码里的标题、网址、ID三项信息。标题可以用&lt;%= item.title %&gt;来替换，网址可以用&lt;%- config.url %&gt;&lt;%- config.root%&gt;&lt;%- item.path %&gt;来替换,ID可以用&lt;%- item.path %&gt;来替换。 重新生成部署在hexo文件下执行：1$ hexo d -g","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"多说","slug":"多说","permalink":"http://yoursite.com/tags/多说/"}]},{"title":"Hexo+Github Pages搭建个人博客","date":"2017-01-04T06:20:23.000Z","path":"2017/01/04/Hexo-Github-Pages搭建个人博客/","text":"系统环境配置安装Node.js下载Node.js，一路安装即可 安装Git下载Git 安装Hexo创建Hexo文件夹，进入文件夹，右键鼠标，点击Git Bash Here，执行以下操作：12345$ npm install hexo-cli -g$ hexo init$ npm install$ hexo g # hexo generate$ hexo s # hexo server 现在打开http://localhost:4000/，可以看到默认的效果了。 Hexo常用命令1234567$ hexo generate # 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹$ hexo server # 启动本地web服务，用于博客的预览$ hexo deploy # 部署博客到远端$ hexo new \"postName\" # 新建文章$ hexo new page \"pageName\" # 新建页面$ hexo d -g # 生成部署$ hexo s -g # 生成预览 将博客部署到Github Pages上本地的博客已经搭建起来了，我们现在需要将本地的博客部署到Github上，就可以直接通过http://gengxin1995.github.io来访问了。 1.创建项目代码库点击New repository 2.安装插件1$ npm install hexo-deployer-git --save 3.将本地Hexo文件更新到Github库中在配置文件_config.xml中作如下修改：1234deploy: type: git repository: https://github.com/gengxin1995/gengxin1995.github.io.git branch: master 然后在hexo文件下执行1$ hexo d -g 即可完成部署 绑定独立域名首先，你需要有个域名，学生可以参与腾讯云校园计划进入source目录，添加CNAME文件，内容为你的域名：在hexo文件夹中提交1$ hexo d -g 然后如下图所示解析域名等待生效，然后你就可以通过域名访问你的博客主页了。 Hexo主题设置以主题yilia为例进行说明在hexo文件夹下的themes目录下：1$ git clone https://github.com/litten/hexo-theme-yilia.git 修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。 返回hexo目录，在Git Bash中输入：12$ hexo clean$ hexo d -g 参考资料 我的博客是如何搭建的（github pages + HEXO + 域名绑定） 手把手教你使用Hexo + Github Pages搭建个人独立博客 Hexo主题Yilia","tags":[{"name":"Github","slug":"Github","permalink":"http://yoursite.com/tags/Github/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]